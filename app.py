import os
from flask import Flask, request, jsonify
import requests
import json
from datetime import datetime, timedelta
import logging

# Configuration du logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# Configuration
PAGE_ACCESS_TOKEN = os.environ.get('PAGE_ACCESS_TOKEN')
VERIFY_TOKEN = os.environ.get('VERIFY_TOKEN', 'denja19')  # Utilisation de 'denja19' comme valeur par d√©faut

# Dictionnaire pour suivre les utilisateurs qui ont d√©j√† re√ßu le message de maintenance
# Cl√©: user_id, Valeur: True si le message complet a d√©j√† √©t√© envoy√©
users_notified = {}

# Message de maintenance complet (envoy√© la premi√®re fois)
maintenance_message = """üö® Mise √† jour importante ! üö®

Salut √† tous ! C'est Djamaldine, et je voulais vous pr√©venir d'un petit changement concernant le bot !

‚öôÔ∏è Le bot sera mis en pause pendant 12 heures pour l'implantation de la nouvelle fonctionnalit√© YouTube.
Cela nous permettra de finaliser les ajustements n√©cessaires et de vous offrir une meilleure exp√©rience avec YouTube ! üìπ

‚è≥ Dur√©e de la pause : 12 heures
üîß Pendant ce temps, le bot ne sera pas accessible, mais ne vous inqui√©tez pas, il reviendra avec de nouvelles am√©liorations tr√®s bient√¥t !

üôè Merci pour votre patience et compr√©hension !
üëâ Pour toute question, vous pouvez me contacter sur Facebook.

Restez connect√©s, on revient tr√®s vite avec la fonctionnalit√© YouTube et bien plus ! üöÄ."""

# Message court pour les messages suivants
response_during_maintenance = "üîß Le bot est en pause pour l'impl√©mentation de la fonctionnalit√© YouTube. Il sera de retour dans environ 12 heures."

# Bouton "Contactez-moi"
contact_button = [{
    "type": "web_url",
    "url": "https://www.facebook.com/DjamalDixneuf",
    "title": "Contactez-moi"
}]

@app.route('/', methods=['GET'])
def verify():
    """
    Webhook verification pour Facebook Messenger
    """
    logger.info(f"Received verification request with params: {request.args}")
    
    if request.args.get("hub.mode") == "subscribe" and request.args.get("hub.challenge"):
        if request.args.get("hub.verify_token") == VERIFY_TOKEN:
            challenge = request.args.get("hub.challenge")
            logger.info(f"Verification successful, returning challenge: {challenge}")
            return challenge, 200
        logger.error(f"Verification token mismatch: {request.args.get('hub.verify_token')} vs {VERIFY_TOKEN}")
        return "Verification token mismatch", 403
    return "Hello world", 200

@app.route('/', methods=['POST'])
def webhook():
    """
    Endpoint pour recevoir les messages
    """
    data = request.get_json()
    logger.info(f"Received webhook data: {data}")
    
    if data["object"] == "page":
        for entry in data["entry"]:
            for messaging_event in entry["messaging"]:
                
                sender_id = messaging_event["sender"]["id"]
                
                # Si un message est re√ßu pendant la maintenance
                if "message" in messaging_event:
                    # V√©rifier si l'utilisateur a d√©j√† re√ßu le message complet
                    if sender_id not in users_notified:
                        # Premi√®re fois - envoyer le message complet avec le bouton
                        logger.info(f"Sending full maintenance message to new user {sender_id}")
                        send_message(sender_id, maintenance_message, contact_button)
                        users_notified[sender_id] = True
                    else:
                        # Messages suivants - envoyer le message court
                        logger.info(f"Sending short maintenance response to returning user {sender_id}")
                        send_message(sender_id, response_during_maintenance)
                    
    return "ok", 200

def send_message(recipient_id, message_text, buttons=None):
    """
    Envoie un message √† un utilisateur sp√©cifique
    """
    params = {
        "access_token": PAGE_ACCESS_TOKEN
    }
    
    if buttons:
        # Message avec bouton
        request_body = {
            "recipient": {
                "id": recipient_id
            },
            "message": {
                "attachment": {
                    "type": "template",
                    "payload": {
                        "template_type": "button",
                        "text": message_text,
                        "buttons": buttons
                    }
                }
            }
        }
    else:
        # Message simple
        request_body = {
            "recipient": {
                "id": recipient_id
            },
            "message": {
                "text": message_text
            }
        }
    
    try:
        response = requests.post(
            "https://graph.facebook.com/v17.0/me/messages",
            params=params,
            json=request_body
        )
        
        response_data = response.json()
        
        if response.status_code != 200:
            logger.error(f"Erreur lors de l'envoi du message √† {recipient_id}: {response.text}")
            return False
        else:
            logger.info(f"Message envoy√© avec succ√®s √† {recipient_id}")
            return True
            
    except Exception as e:
        logger.error(f"Exception lors de l'envoi du message √† {recipient_id}: {str(e)}")
        return False

@app.route('/status', methods=['GET'])
def status():
    """
    Endpoint pour v√©rifier le statut du bot et voir les statistiques
    """
    return jsonify({
        "status": "online",
        "maintenance_mode": True,
        "users_notified": len(users_notified),
        "verify_token": VERIFY_TOKEN[:3] + "***" if VERIFY_TOKEN else "Non configur√©",
        "page_token": PAGE_ACCESS_TOKEN[:5] + "***" if PAGE_ACCESS_TOKEN else "Non configur√©"
    }), 200

@app.route('/reset', methods=['GET'])
def reset_users():
    """
    Endpoint pour r√©initialiser la liste des utilisateurs notifi√©s
    Utile si vous voulez renvoyer le message complet √† tous les utilisateurs
    """
    global users_notified
    count = len(users_notified)
    users_notified = {}
    return jsonify({
        "success": True,
        "message": f"Liste des {count} utilisateurs notifi√©s r√©initialis√©e"
    }), 200

if __name__ == "__main__":
    # Obtenir le port depuis les variables d'environnement pour Render
    port = int(os.environ.get("PORT", 5000))
    app.run(host='0.0.0.0', port=port)
